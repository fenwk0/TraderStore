# coding: utf-8

"""
    Market API

    A simple application exposing the Market to the web

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Trade(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, bid=None, id=None, offer=None, price=None, timestamp=None):
        """
        Trade - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bid': 'BookOrder',
            'id': 'str',
            'offer': 'BookOrder',
            'price': 'float',
            'timestamp': 'datetime'
        }

        self.attribute_map = {
            'bid': 'bid',
            'id': 'id',
            'offer': 'offer',
            'price': 'price',
            'timestamp': 'timestamp'
        }

        self._bid = bid
        self._id = id
        self._offer = offer
        self._price = price
        self._timestamp = timestamp


    @property
    def bid(self):
        """
        Gets the bid of this Trade.


        :return: The bid of this Trade.
        :rtype: BookOrder
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """
        Sets the bid of this Trade.


        :param bid: The bid of this Trade.
        :type: BookOrder
        """

        self._bid = bid

    @property
    def id(self):
        """
        Gets the id of this Trade.


        :return: The id of this Trade.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Trade.


        :param id: The id of this Trade.
        :type: str
        """

        self._id = id

    @property
    def offer(self):
        """
        Gets the offer of this Trade.


        :return: The offer of this Trade.
        :rtype: BookOrder
        """
        return self._offer

    @offer.setter
    def offer(self, offer):
        """
        Sets the offer of this Trade.


        :param offer: The offer of this Trade.
        :type: BookOrder
        """

        self._offer = offer

    @property
    def price(self):
        """
        Gets the price of this Trade.


        :return: The price of this Trade.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this Trade.


        :param price: The price of this Trade.
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def timestamp(self):
        """
        Gets the timestamp of this Trade.


        :return: The timestamp of this Trade.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this Trade.


        :param timestamp: The timestamp of this Trade.
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
