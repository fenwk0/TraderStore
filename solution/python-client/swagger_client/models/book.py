# coding: utf-8

"""
    Market API

    A simple application exposing the Market to the web

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Book(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, current_time=None, instrument=None, store=None):
        """
        Book - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'current_time': 'datetime',
            'instrument': 'str',
            'store': 'str'
        }

        self.attribute_map = {
            'current_time': 'current_time',
            'instrument': 'instrument',
            'store': 'store'
        }

        self._current_time = current_time
        self._instrument = instrument
        self._store = store


    @property
    def current_time(self):
        """
        Gets the current_time of this Book.


        :return: The current_time of this Book.
        :rtype: datetime
        """
        return self._current_time

    @current_time.setter
    def current_time(self, current_time):
        """
        Sets the current_time of this Book.


        :param current_time: The current_time of this Book.
        :type: datetime
        """
        if current_time is None:
            raise ValueError("Invalid value for `current_time`, must not be `None`")

        self._current_time = current_time

    @property
    def instrument(self):
        """
        Gets the instrument of this Book.


        :return: The instrument of this Book.
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """
        Sets the instrument of this Book.


        :param instrument: The instrument of this Book.
        :type: str
        """
        if instrument is None:
            raise ValueError("Invalid value for `instrument`, must not be `None`")

        self._instrument = instrument

    @property
    def store(self):
        """
        Gets the store of this Book.


        :return: The store of this Book.
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """
        Sets the store of this Book.


        :param store: The store of this Book.
        :type: str
        """
        if store is None:
            raise ValueError("Invalid value for `store`, must not be `None`")

        self._store = store

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
