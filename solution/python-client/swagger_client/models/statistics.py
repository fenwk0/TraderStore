# coding: utf-8

"""
    Market API

    A simple application exposing the Market to the web

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Statistics(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, bid_price=None, offer_price=None, spread=None, top_bid=None, top_offer=None, trade_count=None):
        """
        Statistics - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bid_price': 'float',
            'offer_price': 'float',
            'spread': 'float',
            'top_bid': 'BookOrder',
            'top_offer': 'BookOrder',
            'trade_count': 'int'
        }

        self.attribute_map = {
            'bid_price': 'bid_price',
            'offer_price': 'offer_price',
            'spread': 'spread',
            'top_bid': 'top_bid',
            'top_offer': 'top_offer',
            'trade_count': 'trade_count'
        }

        self._bid_price = bid_price
        self._offer_price = offer_price
        self._spread = spread
        self._top_bid = top_bid
        self._top_offer = top_offer
        self._trade_count = trade_count


    @property
    def bid_price(self):
        """
        Gets the bid_price of this Statistics.


        :return: The bid_price of this Statistics.
        :rtype: float
        """
        return self._bid_price

    @bid_price.setter
    def bid_price(self, bid_price):
        """
        Sets the bid_price of this Statistics.


        :param bid_price: The bid_price of this Statistics.
        :type: float
        """
        if bid_price is None:
            raise ValueError("Invalid value for `bid_price`, must not be `None`")

        self._bid_price = bid_price

    @property
    def offer_price(self):
        """
        Gets the offer_price of this Statistics.


        :return: The offer_price of this Statistics.
        :rtype: float
        """
        return self._offer_price

    @offer_price.setter
    def offer_price(self, offer_price):
        """
        Sets the offer_price of this Statistics.


        :param offer_price: The offer_price of this Statistics.
        :type: float
        """
        if offer_price is None:
            raise ValueError("Invalid value for `offer_price`, must not be `None`")

        self._offer_price = offer_price

    @property
    def spread(self):
        """
        Gets the spread of this Statistics.


        :return: The spread of this Statistics.
        :rtype: float
        """
        return self._spread

    @spread.setter
    def spread(self, spread):
        """
        Sets the spread of this Statistics.


        :param spread: The spread of this Statistics.
        :type: float
        """
        if spread is None:
            raise ValueError("Invalid value for `spread`, must not be `None`")

        self._spread = spread

    @property
    def top_bid(self):
        """
        Gets the top_bid of this Statistics.


        :return: The top_bid of this Statistics.
        :rtype: BookOrder
        """
        return self._top_bid

    @top_bid.setter
    def top_bid(self, top_bid):
        """
        Sets the top_bid of this Statistics.


        :param top_bid: The top_bid of this Statistics.
        :type: BookOrder
        """

        self._top_bid = top_bid

    @property
    def top_offer(self):
        """
        Gets the top_offer of this Statistics.


        :return: The top_offer of this Statistics.
        :rtype: BookOrder
        """
        return self._top_offer

    @top_offer.setter
    def top_offer(self, top_offer):
        """
        Sets the top_offer of this Statistics.


        :param top_offer: The top_offer of this Statistics.
        :type: BookOrder
        """

        self._top_offer = top_offer

    @property
    def trade_count(self):
        """
        Gets the trade_count of this Statistics.


        :return: The trade_count of this Statistics.
        :rtype: int
        """
        return self._trade_count

    @trade_count.setter
    def trade_count(self, trade_count):
        """
        Sets the trade_count of this Statistics.


        :param trade_count: The trade_count of this Statistics.
        :type: int
        """
        if trade_count is None:
            raise ValueError("Invalid value for `trade_count`, must not be `None`")

        self._trade_count = trade_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
